name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "YES" to confirm production deployment'
        required: true
        type: string

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        if: github.event.inputs.confirm != 'YES'
        run: |
          echo "::error::You must type YES (all capitals) to confirm production deployment"
          exit 1
      - name: Check branch
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/staging" ]]; then
            echo "::error::This workflow must be run from the staging branch"
            exit 1
          fi

  promote-to-production:
    needs: validate-input
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://carinyaparc.com.au
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Wait for CI checks to complete
      - name: Wait for lint
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: 'lint'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success
      
      - name: Wait for tests
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: 'test'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success
          
      # Get current date for release tag
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
      
      # Simple promotion process
      - name: Merge staging into main
        run: |
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          
          # Make sure we have the latest
          git fetch origin staging
          git fetch origin main
          
          # Create local branches that track the remote branches
          git branch -f staging origin/staging
          git branch -f main origin/main
          
          # Check out main and merge staging into it
          git checkout main
          git merge --no-edit staging
          
          # Create release tag
          git tag "release-${{ steps.date.outputs.date }}"
          
          # Push the result and tag
          git push origin main
          git push origin "release-${{ steps.date.outputs.date }}"
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Production Release ${{ steps.date.outputs.date }}
          tag_name: release-${{ steps.date.outputs.date }}
          body: |
            ðŸš€ Production deployment from staging branch
            
            - Deployment date: ${{ steps.date.outputs.date }}
            - Commit: ${{ github.sha }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Log success
        if: success()
        run: echo "âœ… Successfully deployed to production!"
