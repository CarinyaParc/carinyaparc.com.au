name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      confirm_promotion:
        description: 'Type "YES" to confirm promotion to production'
        required: true
        type: string

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        if: github.event.inputs.confirm_promotion != 'YES'
        run: |
          echo "::error::You must type YES (all capitals) to confirm production deployment"
          exit 1
      - name: Check branch
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/staging" ]]; then
            echo "::error::This workflow must be run from the staging branch"
            exit 1
          fi

  verify-checks:
    needs: validate-input
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Wait for Lint workflow
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: 'lint'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success

      - name: Wait for Test workflow
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: 'test'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success

      - name: Wait for E2E tests (if running)
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-name: 'e2e_tests'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success,skipped
        continue-on-error: true

      - name: Verify staging deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.deployments.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'staging',
              environment: 'preview'
            });

            if (data.length === 0) {
              core.setFailed('No staging deployment found');
              return;
            }

            const latestDeployment = data[0];
            const { data: statuses } = await github.rest.deployments.listDeploymentStatuses({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: latestDeployment.id
            });

            if (statuses.length === 0 || statuses[0].state !== 'success') {
              core.setFailed('Latest staging deployment is not successful');
              return;
            }

            console.log('Staging deployment verified successfully');
        continue-on-error: true

  promote-to-production:
    needs: verify-checks
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://carinyaparc.com.au
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Get the current date for release naming
      - name: Get current date
        id: get-date
        run: echo "date=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT

      - name: Promote to production
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout main
          git merge staging --ff-only
          git push origin main

      - name: Create release tag
        run: |
          git tag "release-${{ steps.get-date.outputs.date }}"
          git push origin "release-${{ steps.get-date.outputs.date }}"

      # Log success message to workflow output
      - name: Log success
        run: echo "ðŸš€ Successfully deployed to production! Vercel will deploy automatically."

      # Create GitHub Release instead of comment (which may fail)
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Production Release ${{ steps.get-date.outputs.date }}
          tag_name: release-${{ steps.get-date.outputs.date }}
          body: |
            ðŸš€ Production deployment from staging branch

            - Deployment date: ${{ steps.get-date.outputs.date }}
            - Commit: ${{ github.sha }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
