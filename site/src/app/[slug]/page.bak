import fs from 'fs';
import path from 'path';
import { notFound } from 'next/navigation';
import { Metadata } from 'next';
import matter from 'gray-matter';

// All possible content subdirectories - add more as your content structure grows
const CONTENT_DIRECTORIES = ['', 'legal', 'blog', 'recipes', 'products'];

export async function generateMetadata({
  params,
}: {
  params: { slug: string };
}): Promise<Metadata> {
  // Try to find the MDX file in any content subdirectory
  let frontmatter = null;

  for (const dir of CONTENT_DIRECTORIES) {
    try {
      const filePath = path.join(process.cwd(), 'content', dir, `${params.slug}.mdx`);
      if (fs.existsSync(filePath)) {
        const source = fs.readFileSync(filePath, 'utf8');
        const { data } = matter(source);
        frontmatter = data;
        break;
      }
    } catch {
      continue;
    }
  }

  if (!frontmatter) {
    return {
      title: 'Page Not Found',
      description: 'The requested page could not be found.',
    };
  }

  return {
    title: `${frontmatter.title} - Carinya Parc`,
    description: frontmatter.description,
  };
}

export default async function Page({ params }) {
  const { slug } = params;

  // Try to load MDX from various content subdirectories
  let ContentComponent;
  let contentPath = '';
  let frontmatter = null;

  // Check each directory for the file
  for (const dir of CONTENT_DIRECTORIES) {
    try {
      const filePath = path.join(process.cwd(), 'content', dir, `${slug}.mdx`);
      if (fs.existsSync(filePath)) {
        contentPath = dir ? `${dir}/${slug}` : slug;
        
        // Get frontmatter for this page
        const source = fs.readFileSync(filePath, 'utf8');
        const { data } = matter(source);
        frontmatter = data;
        break;
      }
    } catch {
      continue;
    }
  }

  if (!contentPath) {
    notFound();
  }

  // Load the component dynamically
  try {
    ContentComponent = contentPath.includes('/')
      ? (await import(`@/content/${contentPath}.mdx`)).default
      : (await import(`@/content/${slug}.mdx`)).default;
  } catch (error) {
    console.error('Error loading MDX content:', error);
    notFound();
  }

  return (
    <div className="container mx-auto py-12 px-4 md:px-6 lg:px-8 max-w-4xl prose prose-eucalyptus">
      {frontmatter?.date && (
        <p className="text-sm text-gray-500 mb-4">Published: {frontmatter.date}</p>
      )}
      <ContentComponent />
    </div>
  );
}

export async function generateStaticParams() {
  const pages = [];

  // Scan all content directories at build time
  for (const dir of CONTENT_DIRECTORIES) {
    try {
      const dirPath = path.join(process.cwd(), 'content', dir);
      if (fs.existsSync(dirPath)) {
        const files = fs.readdirSync(dirPath).filter((file) => file.endsWith('.mdx'));

        files.forEach((file) => {
          pages.push({
            slug: file.replace('.mdx', ''),
          });
        });
      }
    } catch {
      // Skip if directory doesn't exist
    }
  }

  return pages;
}
// Set to true to allow handling paths not returned by generateStaticParams
export const dynamicParams = true;
